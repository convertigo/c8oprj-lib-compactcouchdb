accessibility: Private
comment: the only sequence to run to view statistics or do compact
responseTimeout: 600
↓process [steps.SimpleStep-1644571806966]: 
  expression: |
    'var fsclient;
    
    if (otherCouchDBurl != "") {
    	fsclient = com.twinsoft.convertigo.engine.providers.couchdb.CouchClient(otherCouchDBurl, otherCouchDBusername, otherCouchDBpassword);
    	log.info("process use " + otherCouchDBurl);
    } else {
    	fsclient = com.twinsoft.convertigo.engine.Engine.theApp.couchDbManager.getFullSyncClient();
    	otherCouchDBurl = null;
    	log.info("process use fsclient");
    }
    
    var toJSON = function(json) {
    	return JSON.parse(json.toString());
    }
    
    doCompactDB = doCompactDB == "true";
    doCompactViews = doCompactViews == "true";
    doViewCleanup = doViewCleanup == "true";
    minSizeFile = minSizeFile * 1;
    minFragmentation = minFragmentation * 1;
    
    var dbs, query;
    if (databases.length > 0) {
    	dbs = {items: databases};
    	log.info("process use specified databases")
    } else {
    	if (otherCouchDBurl == null && com.twinsoft.convertigo.engine.util.VersionUtils.compare(com.twinsoft.convertigo.engine.ProductVersion.productVersion, "7.9.6") < 0) {
    		prefix = "" + com.twinsoft.convertigo.engine.EnginePropertiesManager.getProperty(
    			com.twinsoft.convertigo.engine.EnginePropertiesManager.PropertyName.FULLSYNC_COUCH_PREFIX
    		);
    		log.info("process use legacy prefix for dbs: " + prefix);
    		query = new java.util.HashMap();
    		if (prefix.length) {
    			query.put(''startkey'', ''"'' + prefix + ''"'');
    			query.put(''endkey'', ''"'' + prefix + ''\uffff"'');
    		}
    		query.put(''limit'', "" + limit);
    		query.put(''skip'', "" + skip);
    		dbs = toJSON(fsclient.getAllDbs(query));		
    		
    		if (prefix.length) {
    			dbs.items = dbs.items.map(function (item) {
    				return item.substring(prefix.length + 1);
    			})
    		}
    	} else {
    		query = new java.util.HashMap();
    		query.put(''limit'', "" + limit);
    		query.put(''skip'', "" + skip);
    		log.info("process retrieve dbs");
    		dbs = toJSON(fsclient.getAllDbs(query));
    		log.info("dbs:" + JSON.stringify(dbs));
    	}
    }
    
    var i, http, response;
    for (i = 0; i < dbs.items.length; i++) {
    	database = dbs.items[i];
    	if (database.startsWith("_")) {
    		dbs.items.splice(i, 1);
    		i--;
    		continue;
    	}
    	response = toJSON(fsclient.getDatabase(database));
    	if (response.sizes) {
    		dbs.items[i] = {
    			name: database,
    			doc_count: response.doc_count,
    			before_size_active: response.sizes.active,
    			before_size_file: response.sizes.file,
    			before_fragmentation: "" + Math.floor(((response.sizes.file - response.sizes.active) / response.sizes.file) * 100)
    		}
    		dbs.items[i].skip = (dbs.items[i].before_size_file < minSizeFile || dbs.items[i].before_fragmentation < minFragmentation);
    	} else {
    		dbs.items[i] = {
    			name: database,
    			skip: true,
    			error: JSON.stringify(response)
    		}
    	}
    }
    
    if (doCompactDB || doCompactViews || doViewCleanup) {
    	for (i = 0; i < dbs.items.length; i++) {
    		if (dbs.items[i].skip) {
    			continue;
    		}
    		database = dbs.items[i].name;
    		log.warn("" + database);
    		
    		if (doCompactDB) {
    			response = toJSON(fsclient.postCompact(database));
    			log.warn("doCompactDB " + JSON.stringify(response));
    			if (!response.ok == "true") {
    				log.error("doCompactDB not ok for " + database + ": " + JSON.stringify(response));
    			}
    		}
    		
    		if (doViewCleanup) {
    			http = new org.apache.http.client.methods.HttpPost(fsclient.getDatabaseUrl(database) + "/_view_cleanup");
    			response = toJSON(fsclient.execute(http));
    			log.warn("doViewCleanup " + JSON.stringify(response));
    			if (!response.ok == "true") {
    				log.error("doViewCleanup not ok for " + database + ": " + JSON.stringify(response));
    			}
    			
    		}
    		
    		if (doCompactViews) {
    			query = new java.util.HashMap();
    			query.put(''startkey'', ''"_design"'');
    			query.put(''endkey'', ''"_design\uffff"'');
    			response = toJSON(fsclient.getAllDocs(database, query));
    			log.warn("doCompactViews " + JSON.stringify(response));
    			if (!response.ok == "true") {
    				log.error("doCompactViews not ok for " + database + ": " + JSON.stringify(response));
    			}
    		}
    	}
    	
    	for (i = 0; i < dbs.items.length; i++) {
    		if (dbs.items[i].skip) {
    			continue;
    		}
    		
    		database = dbs.items[i].name;
    		
    		log.warn("" + database);
    		response = {compact_running: true};
    		while (response.compact_running) {
    			java.lang.Thread.sleep(500);
    			response = toJSON(fsclient.getDatabase(database));
    		}
    		dbs.items[i].after_size_active = response.sizes.active,
    		dbs.items[i].after_size_file = response.sizes.file,
    		dbs.items[i].after_fragmentation = "" + Math.floor(((response.sizes.file - response.sizes.active) / response.sizes.file) * 100)
    	}
    }'
↓Complex [steps.XMLComplexStep-1644571899738]: 
  nodeName: databases
  ↓type [steps.XMLAttributeStep-1644571899741]: 
    nodeName: type
    nodeText: array
  ↓jAttribute [steps.AttributeStep-1644592921602]: 
    expression: '"" + dbs.items.length'
    nodeName: length
    nodeText: array
  ↓jIterator [steps.SimpleIteratorStep-1644571899744]: 
    expression: dbs.items
    ↓item [steps.XMLComplexStep-1644573556509]: 
      nodeName: item
      ↓name [steps.ElementStep-1644573572923]: 
        expression: item.name
        nodeName: name
      ↓skip [steps.ElementStep-1644576741406]: 
        expression: item.skip
        nodeName: skip
        ↓Attribute [steps.XMLAttributeStep-1644576898983]: 
          nodeName: type
          nodeText: boolean
      ↓jIfThenElse [steps.IfThenElseStep-1644593162652]: 
        condition: typeof item.error == "string"
        ↓jThen [steps.ThenStep-1644593165090]: 
          ↓error [steps.ElementStep-1644593190489]: 
            expression: item.error
            nodeName: error
        ↓jElse [steps.ElseStep-1644593165092]: 
          ↓doc_count [steps.ElementStep-1644573589069]: 
            expression: item.doc_count
            nodeName: doc_count
            ↓Attribute [steps.XMLAttributeStep-1644576878672]: 
              nodeName: type
              nodeText: integer
          ↓before_size_active [steps.ElementStep-1644573651590]: 
            expression: item.before_size_active
            nodeName: before_size_active
            ↓Attribute [steps.XMLAttributeStep-1644576895351]: 
              nodeName: type
              nodeText: integer
          ↓before_size_file [steps.ElementStep-1644573668516]: 
            expression: item.before_size_file
            nodeName: before_size_file
            ↓Attribute [steps.XMLAttributeStep-1644576896158]: 
              nodeName: type
              nodeText: integer
          ↓before_fragmentation [steps.ElementStep-1644573680902]: 
            expression: item.before_fragmentation
            nodeName: before_fragmentation
            ↓Attribute [steps.XMLAttributeStep-1644576897661]: 
              nodeName: type
              nodeText: integer
      ↓jIf [steps.IfStep-1644576727777]: 
        condition: typeof item.after_size_active == "number"
        ↓after_size_active [steps.ElementStep-1644575229485]: 
          expression: item.after_size_active
          nodeName: after_size_active
          ↓Attribute [steps.XMLAttributeStep-1644576907638]: 
            nodeName: type
            nodeText: integer
        ↓after_size_file [steps.ElementStep-1644575255373]: 
          expression: item.after_size_file
          nodeName: after_size_file
          ↓Attribute [steps.XMLAttributeStep-1644576908189]: 
            nodeName: type
            nodeText: integer
        ↓after_fragmentation [steps.ElementStep-1644575272677]: 
          expression: item.after_fragmentation
          nodeName: after_fragmentation
          ↓Attribute [steps.XMLAttributeStep-1644576907086]: 
            nodeName: type
            nodeText: integer
↓databases [variables.RequestableMultiValuedVariable-1644592413471]: 
  comment: databases names to handle or empty for all databases
  value: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
↓doCompactDB [variables.RequestableVariable-1644571615278]: 
  comment: true to perform a _compact
  value: false
↓doCompactViews [variables.RequestableVariable-1644571637814]: 
  comment: true to perform _compact/{design}
  value: false
↓doViewCleanup [variables.RequestableVariable-1644571680611]: 
  comment: true to perform _view_cleanup
  value: false
↓minSizeFile [variables.RequestableVariable-1644576431969]: 
  comment: database using less than this size is skipped
  value: 500000
↓minFragmentation [variables.RequestableVariable-1644576469245]: 
  comment: database fragmented less than this is skipped
  value: 25
↓otherCouchDBurl [variables.RequestableVariable-1644571552110]: 
  comment: empty for current fullsync server or the a CouchDB url to use it
  value: 
↓otherCouchDBusername [variables.RequestableVariable-1644592336405]: 
  comment: specify CouchDB username in case of an url is set
  value: 
↓otherCouchDBpassword [variables.RequestableVariable-1644592352869]: 
  comment: specify CouchDB password in case of an url is et
  value: 
↓limit [variables.RequestableVariable-1651668087260]: 
  value: 10
↓skip [variables.RequestableVariable-1651668095022]: 
  value: 0
↓CompactAll [core.TestCase]: 
  ↓doCompactDB [variables.TestCaseVariable-1644596086284]: 
    value: true
  ↓doCompactViews [variables.TestCaseVariable-1644596086286]: 
    value: true
  ↓doViewCleanup [variables.TestCaseVariable-1644596086288]: 
    value: true